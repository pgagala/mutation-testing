plugins {
    id 'java'
    id 'groovy'
    id 'io.freefair.lombok' version '5.3.0'
    id 'info.solidsoft.pitest' version '1.5.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = '15'

dependencies {
    testCompile(
            'org.codehaus.groovy:groovy-all:3.0.7',
            'org.spockframework:spock-core:2.0-M4-groovy-3.0',
            'org.testcontainers:spock:1.15.0'
    )
    compile 'org.slf4j:slf4j-api:1.7.30'
    compile 'ch.qos.logback:logback-classic:1.3.0-alpha5'
}

test {
    useJUnitPlatform()
}

//configurable arguments available under https://github.com/szpak/gradle-pitest-plugin/blob/master/src/main/groovy/info/solidsoft/gradle/pitest/PitestPluginExtension.groovy
pitest {
    //https://github.com/pitest/pitest-junit5-plugin
    junit5PluginVersion = '0.12'

    //classes on which mutation should be applied
    targetClasses = ['io.github.pgagala.*']

    //tests which should be used to check if mutations on target classes survived
    targetTests = ['io.github.pgagala.*']

    //which test classes we want to exclude (typically integration spec)
    //excludedTestClasses = ['*IntegrationSpec']

    //which methods we want to exclude from mutation testing
    excludedMethods = ['hashCode','equals','toString']

    //on how many threads mutation testing should be run
    threads = 4

    //format of report
    outputFormats = ['HTML']

    //disable generate reports inside timestamped folder every run
    timestampedReports = false

    //skip analysis if codebase hasn't changed - https://pitest.org/quickstart/incremental_analysis/
    enableDefaultIncrementalAnalysis = true

    //place where pitest report should be placed - convenient not to place it in build folder (which is cleaned up during clean phase)
    reportDir = file('pitestReport')

    //file where info about incremental analysis is read from
    historyInputLocation = file('pitestReport/pitHistory.txt')

    //file where info about incremental analysis is written
    historyOutputLocation = file('pitestReport/pitHistory.txt')

    //how much time mutation test can consume in comparision to normal test run (if exceedes - then test will be timed out)
    //e.g if set to 2 means that mutation test can run twice as long as normal test run
    timeoutFactor = 1.5

    //Constant amount of additional time to allow a test to run for (after the application of the timeoutFactor) before considering it to be stuck in an infinite loop
    timeoutConstInMillis = 5000
}
